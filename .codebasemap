{
  "metadata": {
    "version": 1,
    "root": "/Users/carl/Development/agents/text-editor-autocomplete-demo",
    "createdAt": "2025-09-01T18:27:45.644Z",
    "updatedAt": "2025-09-01T18:27:45.644Z",
    "totalFiles": 39
  },
  "tree": {
    "name": "text-editor-autocomplete-demo",
    "type": "dir",
    "children": [
      {
        "name": "__tests__",
        "type": "dir",
        "children": [
          {
            "name": "accessibility",
            "type": "dir",
            "children": [
              {
                "name": "accessibility.test.tsx",
                "type": "file"
              }
            ]
          },
          {
            "name": "api",
            "type": "dir",
            "children": [
              {
                "name": "complete.test.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "components",
            "type": "dir",
            "children": [
              {
                "name": "AutocompleteEditor.test.tsx",
                "type": "file"
              },
              {
                "name": "ContextPanel.test.tsx",
                "type": "file"
              },
              {
                "name": "ErrorNotification.test.tsx",
                "type": "file"
              },
              {
                "name": "KeyboardShortcutsHelp.test.tsx",
                "type": "file"
              }
            ]
          },
          {
            "name": "hooks",
            "type": "dir",
            "children": [
              {
                "name": "useKeyboardShortcuts.test.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "integration",
            "type": "dir",
            "children": [
              {
                "name": "context-transmission.test.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "lib",
            "type": "dir",
            "children": [
              {
                "name": "context",
                "type": "dir",
                "children": [
                  {
                    "name": "CompletionContext.test.tsx",
                    "type": "file"
                  }
                ]
              },
              {
                "name": "errors",
                "type": "dir",
                "children": [
                  {
                    "name": "ContextErrorHandler.test.ts",
                    "type": "file"
                  }
                ]
              },
              {
                "name": "cache-optimization.test.ts",
                "type": "file"
              },
              {
                "name": "InlineComplete.test.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "utils",
            "type": "dir",
            "children": [
              {
                "name": "test-helpers.tsx",
                "type": "file"
              }
            ]
          },
          {
            "name": "setup.test.ts",
            "type": "file"
          }
        ]
      },
      {
        "name": "app",
        "type": "dir",
        "children": [
          {
            "name": "api",
            "type": "dir",
            "children": [
              {
                "name": "complete",
                "type": "dir",
                "children": [
                  {
                    "name": "route.ts",
                    "type": "file"
                  }
                ]
              }
            ]
          },
          {
            "name": "layout.tsx",
            "type": "file"
          },
          {
            "name": "page.tsx",
            "type": "file"
          }
        ]
      },
      {
        "name": "components",
        "type": "dir",
        "children": [
          {
            "name": "AccessibleKeywordsInput.tsx",
            "type": "file"
          },
          {
            "name": "CachePerformanceDisplay.tsx",
            "type": "file"
          },
          {
            "name": "ContextPanel.tsx",
            "type": "file"
          },
          {
            "name": "ErrorNotification.tsx",
            "type": "file"
          },
          {
            "name": "KeyboardShortcutsHelp.tsx",
            "type": "file"
          }
        ]
      },
      {
        "name": "lib",
        "type": "dir",
        "children": [
          {
            "name": "context",
            "type": "dir",
            "children": [
              {
                "name": "CompletionContext.tsx",
                "type": "file"
              }
            ]
          },
          {
            "name": "errors",
            "type": "dir",
            "children": [
              {
                "name": "ContextErrorHandler.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "hooks",
            "type": "dir",
            "children": [
              {
                "name": "useAccessibility.ts",
                "type": "file"
              },
              {
                "name": "useCacheMonitoring.ts",
                "type": "file"
              },
              {
                "name": "useContextErrorHandling.ts",
                "type": "file"
              },
              {
                "name": "useKeyboardShortcuts.ts",
                "type": "file"
              },
              {
                "name": "useTokenMonitoring.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "utils",
            "type": "dir",
            "children": [
              {
                "name": "contextUtils.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "validation",
            "type": "dir",
            "children": [
              {
                "name": "contextValidation.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "InlineComplete.ts",
            "type": "file"
          },
          {
            "name": "tokenizer.ts",
            "type": "file"
          },
          {
            "name": "types.ts",
            "type": "file"
          }
        ]
      },
      {
        "name": "jest.config.js",
        "type": "file"
      },
      {
        "name": "jest.setup.js",
        "type": "file"
      },
      {
        "name": "next.config.js",
        "type": "file"
      },
      {
        "name": "postcss.config.js",
        "type": "file"
      },
      {
        "name": "tailwind.config.js",
        "type": "file"
      }
    ]
  },
  "nodes": [
    "__tests__/accessibility/accessibility.test.tsx",
    "__tests__/api/complete.test.ts",
    "__tests__/components/AutocompleteEditor.test.tsx",
    "__tests__/components/ContextPanel.test.tsx",
    "__tests__/components/ErrorNotification.test.tsx",
    "__tests__/components/KeyboardShortcutsHelp.test.tsx",
    "__tests__/hooks/useKeyboardShortcuts.test.ts",
    "__tests__/integration/context-transmission.test.ts",
    "__tests__/lib/InlineComplete.test.ts",
    "__tests__/lib/cache-optimization.test.ts",
    "__tests__/lib/context/CompletionContext.test.tsx",
    "__tests__/lib/errors/ContextErrorHandler.test.ts",
    "__tests__/setup.test.ts",
    "__tests__/utils/test-helpers.tsx",
    "app/api/complete/route.ts",
    "app/layout.tsx",
    "app/page.tsx",
    "components/AccessibleKeywordsInput.tsx",
    "components/CachePerformanceDisplay.tsx",
    "components/ContextPanel.tsx",
    "components/ErrorNotification.tsx",
    "components/KeyboardShortcutsHelp.tsx",
    "jest.config.js",
    "jest.setup.js",
    "lib/InlineComplete.ts",
    "lib/context/CompletionContext.tsx",
    "lib/errors/ContextErrorHandler.ts",
    "lib/hooks/useAccessibility.ts",
    "lib/hooks/useCacheMonitoring.ts",
    "lib/hooks/useContextErrorHandling.ts",
    "lib/hooks/useKeyboardShortcuts.ts",
    "lib/hooks/useTokenMonitoring.ts",
    "lib/tokenizer.ts",
    "lib/types.ts",
    "lib/utils/contextUtils.ts",
    "lib/validation/contextValidation.ts",
    "next.config.js",
    "postcss.config.js",
    "tailwind.config.js"
  ],
  "edges": [
    {
      "from": "__tests__/api/complete.test.ts",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/components/AutocompleteEditor.test.tsx",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/components/ContextPanel.test.tsx",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/components/ErrorNotification.test.tsx",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/integration/context-transmission.test.ts",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/lib/context/CompletionContext.test.tsx",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "__tests__/setup.test.ts",
      "to": "__tests__/utils/test-helpers.tsx"
    },
    {
      "from": "lib/InlineComplete.ts",
      "to": "lib/types.ts"
    },
    {
      "from": "lib/InlineComplete.ts",
      "to": "lib/utils/contextUtils.ts"
    }
  ],
  "files": {
    "__tests__/accessibility/accessibility.test.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@testing-library/react",
          "kind": "import",
          "imported": [
            "render",
            "screen",
            "fireEvent",
            "waitFor"
          ]
        },
        {
          "from": "@testing-library/user-event",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "jest-axe",
          "kind": "import",
          "imported": [
            "axe",
            "toHaveNoViolations"
          ]
        },
        {
          "from": "@/components/ContextPanel",
          "kind": "import",
          "imported": [
            "ContextPanel"
          ]
        },
        {
          "from": "@/components/AccessibleKeywordsInput",
          "kind": "import",
          "imported": [
            "AccessibleKeywordsInput"
          ]
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "CompletionContextProvider"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "TestWrapper",
          "initKind": "function",
          "isExported": false,
          "type": "React.FC<{ children: React.ReactNode }>"
        },
        {
          "name": "renderWithAccessibility",
          "initKind": "function",
          "isExported": false
        }
      ]
    },
    "__tests__/api/complete.test.ts": {
      "imports": [
        {
          "from": "@/app/api/complete/route",
          "kind": "import"
        },
        {
          "from": "ai",
          "kind": "import"
        },
        {
          "from": "next/server",
          "kind": "import"
        },
        {
          "from": "../utils/test-helpers",
          "kind": "import"
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/components/AutocompleteEditor.test.tsx": {
      "imports": [
        {
          "from": "@testing-library/jest-dom",
          "kind": "import"
        },
        {
          "from": "../utils/test-helpers",
          "kind": "import",
          "imported": [
            "render",
            "screen"
          ]
        },
        {
          "from": "@/app/page",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@tiptap/react",
          "kind": "import",
          "imported": [
            "useEditor"
          ]
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "mockUseEditor",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "createMockEditor",
          "initKind": "function",
          "isExported": false
        }
      ]
    },
    "__tests__/components/ContextPanel.test.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "../utils/test-helpers",
          "kind": "import",
          "imported": [
            "render",
            "screen",
            "fireEvent",
            "waitFor",
            "setupMockLocalStorage"
          ]
        },
        {
          "from": "@testing-library/user-event",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/components/ContextPanel",
          "kind": "import",
          "imported": [
            "ContextPanel"
          ]
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "mockLocalStorage",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "renderContextPanel",
          "initKind": "function",
          "isExported": false
        }
      ]
    },
    "__tests__/components/ErrorNotification.test.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "../utils/test-helpers",
          "kind": "import",
          "imported": [
            "render",
            "screen",
            "fireEvent",
            "waitFor"
          ]
        },
        {
          "from": "@testing-library/user-event",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/components/ErrorNotification",
          "kind": "import",
          "imported": [
            "ErrorNotification",
            "useErrorNotification"
          ]
        },
        {
          "from": "@/lib/errors/ContextErrorHandler",
          "kind": "import",
          "imported": [
            "ContextErrorHandler"
          ]
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/components/KeyboardShortcutsHelp.test.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import"
        },
        {
          "from": "@testing-library/react",
          "kind": "import"
        },
        {
          "from": "@testing-library/user-event",
          "kind": "import"
        },
        {
          "from": "@/components/KeyboardShortcutsHelp",
          "kind": "import"
        },
        {
          "from": "@/lib/hooks/useKeyboardShortcuts",
          "kind": "import"
        },
        {
          "from": "@/lib/hooks/useKeyboardShortcuts",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/hooks/useKeyboardShortcuts.test.ts": {
      "imports": [
        {
          "from": "@testing-library/react",
          "kind": "import",
          "imported": [
            "renderHook",
            "act"
          ]
        },
        {
          "from": "@/lib/hooks/useKeyboardShortcuts",
          "kind": "import",
          "imported": [
            "useKeyboardShortcuts",
            "useEscapeKey",
            "useFocusManagement"
          ]
        },
        {
          "from": "@/lib/hooks/useKeyboardShortcuts",
          "kind": "import",
          "imported": [
            "KeyboardShortcut"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "originalNavigator",
          "initKind": "unknown",
          "isExported": false
        }
      ]
    },
    "__tests__/integration/context-transmission.test.ts": {
      "imports": [
        {
          "from": "@/app/api/complete/route",
          "kind": "import"
        },
        {
          "from": "ai",
          "kind": "import"
        },
        {
          "from": "next/server",
          "kind": "import"
        },
        {
          "from": "../utils/test-helpers",
          "kind": "import"
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/lib/InlineComplete.test.ts": {
      "imports": [
        {
          "from": "@/lib/InlineComplete",
          "kind": "import",
          "imported": [
            "InlineComplete",
            "pluginKey"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/lib/cache-optimization.test.ts": {
      "imports": [
        {
          "from": "@/lib/hooks/useCacheMonitoring",
          "kind": "import",
          "imported": [
            "extractDebugMetrics"
          ]
        },
        {
          "from": "@/lib/hooks/useCacheMonitoring",
          "kind": "import",
          "imported": [
            "CacheMetrics"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/lib/context/CompletionContext.test.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@testing-library/react",
          "kind": "import",
          "imported": [
            "render",
            "screen",
            "act"
          ]
        },
        {
          "from": "@testing-library/user-event",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "CompletionContextProvider",
            "useCompletionContext"
          ]
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        },
        {
          "from": "../../utils/test-helpers",
          "kind": "import",
          "imported": [
            "setupMockCrypto",
            "setupMockLocalStorage"
          ]
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "mockLocalStorage",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "TestContextComponent",
          "initKind": "function",
          "isExported": false
        }
      ]
    },
    "__tests__/lib/errors/ContextErrorHandler.test.ts": {
      "imports": [
        {
          "from": "@/lib/errors/ContextErrorHandler",
          "kind": "import",
          "imported": [
            "ContextErrorHandler",
            "ContextError",
            "ErrorMetrics"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/setup.test.ts": {
      "imports": [
        {
          "from": "@testing-library/jest-dom",
          "kind": "import"
        },
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "./utils/test-helpers",
          "kind": "import",
          "imported": [
            "render",
            "screen"
          ]
        },
        {
          "from": "./utils/test-helpers",
          "kind": "import",
          "imported": [
            "mockApiResponse",
            "createTestView"
          ]
        }
      ],
      "dependencies": [
        "__tests__/utils/test-helpers.tsx"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "__tests__/utils/test-helpers.tsx": {
      "imports": [
        {
          "from": "@testing-library/react",
          "kind": "import",
          "imported": [
            "render",
            "RenderOptions",
            "screen",
            "waitFor"
          ]
        },
        {
          "from": "react",
          "kind": "import",
          "imported": [
            "ReactElement"
          ]
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "CompletionContextProvider"
          ]
        },
        {
          "from": "@testing-library/react",
          "kind": "export"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "AllTheProviders",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "customRender",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "mockApiResponse",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "mockApiError",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "setupMockLocalStorage",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "setupMockCrypto",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "waitForLoadingToFinish",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "expectTokenCount",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "createMockContextState",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "createTestView",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "createTestViewWithSuggestion",
          "initKind": "function",
          "isExported": true
        }
      ]
    },
    "app/api/complete/route.ts": {
      "imports": [
        {
          "from": "next/server",
          "kind": "import"
        },
        {
          "from": "ai",
          "kind": "import"
        },
        {
          "from": "@ai-sdk/google",
          "kind": "import"
        },
        {
          "from": "zod",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "app/layout.tsx": {
      "imports": [
        {
          "from": "next",
          "kind": "import",
          "imported": [
            "Metadata"
          ]
        },
        {
          "from": "next/font/google",
          "kind": "import",
          "imported": [
            "Inter"
          ]
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "CompletionContextProvider"
          ]
        },
        {
          "from": "./globals.css",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "RootLayout",
          "params": [
            {
              "name": "unknown",
              "type": "{\n  children: React.ReactNode;\n}"
            }
          ],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": [
        {
          "name": "inter",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "metadata",
          "initKind": "object",
          "isExported": true,
          "type": "Metadata"
        },
        {
          "name": "viewport",
          "initKind": "object",
          "isExported": true
        }
      ]
    },
    "app/page.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true,
          "imported": [
            "useEffect",
            "useRef"
          ]
        },
        {
          "from": "@tiptap/react",
          "kind": "import",
          "imported": [
            "useEditor",
            "EditorContent",
            "Editor"
          ]
        },
        {
          "from": "@tiptap/starter-kit",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/InlineComplete",
          "kind": "import",
          "imported": [
            "InlineComplete"
          ]
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "useCompletionContext"
          ]
        },
        {
          "from": "@/components/ContextPanel",
          "kind": "import",
          "imported": [
            "ContextPanel"
          ]
        },
        {
          "from": "@/lib/hooks/useAccessibility",
          "kind": "import",
          "imported": [
            "useAccessibility"
          ]
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        },
        {
          "from": "@/lib/utils/contextUtils",
          "kind": "import",
          "imported": [
            "createContextSnapshot"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "Page",
          "params": [],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [
        {
          "name": "AutocompleteErrorBoundary",
          "isExported": false,
          "methods": [
            {
              "name": "getDerivedStateFromError",
              "params": [
                {
                  "name": "error",
                  "type": "Error"
                }
              ],
              "isAsync": false,
              "isStatic": true
            },
            {
              "name": "componentDidCatch",
              "params": [
                {
                  "name": "error",
                  "type": "Error"
                },
                {
                  "name": "errorInfo",
                  "type": "React.ErrorInfo"
                }
              ],
              "isAsync": false
            },
            {
              "name": "render",
              "params": [],
              "isAsync": false
            }
          ],
          "properties": [],
          "extends": "React.Component"
        }
      ],
      "constants": [
        {
          "name": "MenuButton",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "MenuSeparator",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "MenuBar",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "AutocompleteEditor",
          "initKind": "function",
          "isExported": false,
          "type": "React.FC"
        }
      ]
    },
    "components/AccessibleKeywordsInput.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true,
          "imported": [
            "useState",
            "useCallback",
            "useRef",
            "useEffect"
          ]
        },
        {
          "from": "@/lib/hooks/useAccessibility",
          "kind": "import",
          "imported": [
            "useAccessibility"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "AccessibleKeywordsInput",
          "initKind": "function",
          "isExported": true,
          "type": "React.FC<AccessibleKeywordsInputProps>"
        }
      ]
    },
    "components/CachePerformanceDisplay.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/hooks/useCacheMonitoring",
          "kind": "import",
          "imported": [
            "useCacheMonitoring",
            "CacheStats",
            "CachePerformanceMetrics"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "CachePerformanceDisplay",
          "params": [
            {
              "name": "unknown",
              "type": "CachePerformanceDisplayProps"
            }
          ],
          "isAsync": false,
          "isExported": true
        },
        {
          "name": "MetricCard",
          "params": [
            {
              "name": "unknown",
              "type": "MetricCardProps"
            }
          ],
          "isAsync": false,
          "isExported": false
        },
        {
          "name": "RequestRow",
          "params": [
            {
              "name": "unknown",
              "type": "RequestRowProps"
            }
          ],
          "isAsync": false,
          "isExported": false
        },
        {
          "name": "CachePerformanceCompact",
          "params": [
            {
              "name": "unknown",
              "type": "{ className?: string }"
            }
          ],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": []
    },
    "components/ContextPanel.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true,
          "imported": [
            "useState",
            "useCallback",
            "useEffect",
            "useRef"
          ]
        },
        {
          "from": "@/lib/context/CompletionContext",
          "kind": "import",
          "imported": [
            "useCompletionContext"
          ]
        },
        {
          "from": "@/lib/hooks/useTokenMonitoring",
          "kind": "import",
          "imported": [
            "useTokenMonitoring"
          ]
        },
        {
          "from": "@/lib/hooks/useAccessibility",
          "kind": "import",
          "imported": [
            "useAccessibility"
          ]
        },
        {
          "from": "@/components/ErrorNotification",
          "kind": "import",
          "imported": [
            "ErrorNotification"
          ]
        },
        {
          "from": "@/lib/hooks/useContextErrorHandling",
          "kind": "import",
          "imported": [
            "useContextErrorHandling"
          ]
        },
        {
          "from": "@/lib/tokenizer",
          "kind": "import",
          "imported": [
            "getTokenCountColorClass",
            "getTokenWarningMessage",
            "getTokenProgress",
            "getProgressBarColorClass",
            "getWarningIcon",
            "MAX_TOKEN_LIMIT"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "ContextPanel",
          "initKind": "function",
          "isExported": true,
          "type": "React.FC<ContextPanelProps>"
        }
      ]
    },
    "components/ErrorNotification.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true,
          "imported": [
            "useEffect",
            "useCallback",
            "useState"
          ]
        },
        {
          "from": "@/lib/errors/ContextErrorHandler",
          "kind": "import",
          "imported": [
            "ContextError",
            "RecoveryStrategy",
            "ContextErrorHandler"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "useErrorNotification",
          "params": [],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": [
        {
          "name": "ErrorNotification",
          "initKind": "function",
          "isExported": true,
          "type": "React.FC<ErrorNotificationProps>"
        }
      ]
    },
    "components/KeyboardShortcutsHelp.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/hooks/useKeyboardShortcuts",
          "kind": "import",
          "imported": [
            "KeyboardShortcut"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "ShortcutRow",
          "initKind": "function",
          "isExported": false,
          "type": "React.FC<ShortcutRowProps>"
        },
        {
          "name": "KeyboardShortcutsHelp",
          "initKind": "function",
          "isExported": true,
          "type": "React.FC<KeyboardShortcutsHelpProps>"
        }
      ]
    },
    "jest.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "nextJest",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "createJestConfig",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "customJestConfig",
          "initKind": "object",
          "isExported": false
        }
      ]
    },
    "jest.setup.js": {
      "imports": [
        {
          "from": "@testing-library/jest-dom",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "originalError",
          "initKind": "unknown",
          "isExported": false
        }
      ]
    },
    "lib/InlineComplete.ts": {
      "imports": [
        {
          "from": "@tiptap/core",
          "kind": "import"
        },
        {
          "from": "prosemirror-state",
          "kind": "import"
        },
        {
          "from": "prosemirror-view",
          "kind": "import"
        },
        {
          "from": "./types",
          "kind": "import"
        },
        {
          "from": "./utils/contextUtils",
          "kind": "import"
        }
      ],
      "dependencies": [
        "lib/types.ts",
        "lib/utils/contextUtils.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "lib/context/CompletionContext.tsx": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true,
          "imported": [
            "createContext",
            "useContext",
            "useState",
            "useCallback",
            "useEffect"
          ]
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState",
            "CompletionContextValue"
          ]
        },
        {
          "from": "@/lib/errors/ContextErrorHandler",
          "kind": "import",
          "imported": [
            "ContextErrorHandler",
            "ContextError"
          ]
        },
        {
          "from": "@/lib/tokenizer",
          "kind": "import",
          "imported": [
            "getContextTokenCount",
            "getWarningLevel",
            "checkTokenLimit",
            "TokenWarningLevel"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "normalizeContext",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "handleContextError",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "generateContextHash",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "estimateTokenCount",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "CONTEXT_STORAGE_KEY",
          "initKind": "literal",
          "isExported": false
        },
        {
          "name": "saveToLocalStorage",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "loadFromLocalStorage",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "getDefaultContext",
          "initKind": "function",
          "isExported": false
        },
        {
          "name": "CompletionContext",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "CompletionContextProvider",
          "initKind": "function",
          "isExported": true,
          "type": "React.FC<{ children: React.ReactNode }>"
        },
        {
          "name": "useCompletionContext",
          "initKind": "function",
          "isExported": true
        }
      ]
    },
    "lib/errors/ContextErrorHandler.ts": {
      "imports": [
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [
        {
          "name": "ContextErrorHandler",
          "isExported": true,
          "methods": [
            {
              "name": "createError",
              "params": [
                {
                  "name": "type",
                  "type": "ContextErrorType"
                },
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "options",
                  "type": "{\n      severity?: ErrorSeverity;\n      originalError?: Error;\n      context?: Record<string, unknown>;\n      code?: string;\n    }"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleStorageError",
              "params": [
                {
                  "name": "operation",
                  "type": "'save' | 'load'"
                },
                {
                  "name": "error",
                  "type": "Error"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleValidationError",
              "params": [
                {
                  "name": "field",
                  "type": "string"
                },
                {
                  "name": "value",
                  "type": "unknown"
                },
                {
                  "name": "rule",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleTokenLimitError",
              "params": [
                {
                  "name": "currentCount",
                  "type": "number"
                },
                {
                  "name": "maxCount",
                  "type": "number"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleNetworkError",
              "params": [
                {
                  "name": "operation",
                  "type": "string"
                },
                {
                  "name": "error",
                  "type": "Error"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleCryptoError",
              "params": [
                {
                  "name": "error",
                  "type": "Error"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "handleBrowserError",
              "params": [
                {
                  "name": "feature",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "ContextError",
              "isStatic": true
            },
            {
              "name": "getRecoveryStrategy",
              "params": [
                {
                  "name": "errorType",
                  "type": "ContextErrorType"
                }
              ],
              "isAsync": false,
              "returnType": "RecoveryStrategy",
              "isStatic": true
            },
            {
              "name": "attemptRecovery",
              "params": [
                {
                  "name": "error",
                  "type": "ContextError"
                },
                {
                  "name": "operation",
                  "type": "() => Promise<T>"
                },
                {
                  "name": "retryCount",
                  "type": "number"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<T | null>",
              "isStatic": true
            },
            {
              "name": "getMetrics",
              "params": [],
              "isAsync": false,
              "returnType": "ErrorMetrics",
              "isStatic": true
            },
            {
              "name": "resetMetrics",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isStatic": true
            },
            {
              "name": "isRetryable",
              "params": [
                {
                  "name": "type",
                  "type": "ContextErrorType"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "isRecoverable",
              "params": [
                {
                  "name": "type",
                  "type": "ContextErrorType"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "getDefaultSeverity",
              "params": [
                {
                  "name": "type",
                  "type": "ContextErrorType"
                }
              ],
              "isAsync": false,
              "returnType": "ErrorSeverity",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "generateUserMessage",
              "params": [
                {
                  "name": "type",
                  "type": "ContextErrorType"
                },
                {
                  "name": "message",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "updateMetrics",
              "params": [
                {
                  "name": "error",
                  "type": "ContextError"
                }
              ],
              "isAsync": false,
              "returnType": "void",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "logError",
              "params": [
                {
                  "name": "error",
                  "type": "ContextError"
                }
              ],
              "isAsync": false,
              "returnType": "void",
              "isStatic": true,
              "isPrivate": true
            }
          ],
          "properties": [
            {
              "name": "metrics",
              "type": "ErrorMetrics",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "isDevelopment",
              "isStatic": true,
              "isPrivate": true
            }
          ]
        }
      ],
      "constants": []
    },
    "lib/hooks/useAccessibility.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "lib/hooks/useCacheMonitoring.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "imported": [
            "useState",
            "useEffect",
            "useCallback",
            "useRef",
            "useMemo"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "useCacheMonitoring",
          "params": [
            {
              "name": "options",
              "type": "CacheMonitoringOptions"
            }
          ],
          "isAsync": false,
          "isExported": true
        },
        {
          "name": "extractDebugMetrics",
          "params": [
            {
              "name": "response",
              "type": "{ debug?: unknown }"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "CacheMetrics | null"
        }
      ],
      "classes": [],
      "constants": []
    },
    "lib/hooks/useContextErrorHandling.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "imported": [
            "useState",
            "useCallback"
          ]
        },
        {
          "from": "@/lib/errors/ContextErrorHandler",
          "kind": "import",
          "imported": [
            "ContextError",
            "ContextErrorHandler"
          ]
        },
        {
          "from": "@/components/ErrorNotification",
          "kind": "import",
          "imported": [
            "useErrorNotification"
          ]
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "useContextErrorHandling",
          "params": [],
          "isAsync": false,
          "isExported": true
        },
        {
          "name": "createContextError",
          "params": [
            {
              "name": "operation",
              "type": "FailedOperation"
            },
            {
              "name": "error",
              "type": "Error"
            }
          ],
          "isAsync": false,
          "isExported": false,
          "returnType": "ContextError"
        },
        {
          "name": "executeFailedOperation",
          "params": [
            {
              "name": "operation",
              "type": "FailedOperation"
            }
          ],
          "isAsync": true,
          "isExported": false,
          "returnType": "Promise<void>"
        }
      ],
      "classes": [],
      "constants": []
    },
    "lib/hooks/useKeyboardShortcuts.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "lib/hooks/useTokenMonitoring.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "imported": [
            "useEffect",
            "useRef"
          ]
        },
        {
          "from": "@/lib/tokenizer",
          "kind": "import",
          "imported": [
            "TokenWarningLevel",
            "getTokenWarningLevel",
            "getTokenWarningMessage"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "useTokenMonitoring",
          "params": [
            {
              "name": "tokenCount",
              "type": "number"
            },
            {
              "name": "enabled",
              "type": "boolean"
            }
          ],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": []
    },
    "lib/tokenizer.ts": {
      "imports": [
        {
          "from": "gpt3-tokenizer",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "getTokenCount",
          "params": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "number"
        },
        {
          "name": "getContextTokenCount",
          "params": [
            {
              "name": "context",
              "type": "CompletionContextState"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "number"
        },
        {
          "name": "getTokenWarningLevel",
          "params": [
            {
              "name": "tokenCount",
              "type": "number"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "TokenWarningLevel"
        },
        {
          "name": "getTokenCountColorClass",
          "params": [
            {
              "name": "warningLevel",
              "type": "TokenWarningLevel"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "string"
        },
        {
          "name": "getTokenWarningMessage",
          "params": [
            {
              "name": "tokenCount",
              "type": "number"
            },
            {
              "name": "warningLevel",
              "type": "TokenWarningLevel"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "string | null"
        },
        {
          "name": "getTokenProgress",
          "params": [
            {
              "name": "tokenCount",
              "type": "number"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "number"
        },
        {
          "name": "getProgressBarColorClass",
          "params": [
            {
              "name": "warningLevel",
              "type": "TokenWarningLevel"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "string"
        },
        {
          "name": "isWithinTokenLimit",
          "params": [
            {
              "name": "tokenCount",
              "type": "number"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "boolean"
        },
        {
          "name": "getWarningIcon",
          "params": [
            {
              "name": "warningLevel",
              "type": "TokenWarningLevel"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "string | null"
        },
        {
          "name": "getTokenizerDebugInfo",
          "params": [],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": [
        {
          "name": "GPT3Tokenizer",
          "initKind": "unknown",
          "isExported": false,
          "type": "GPT3TokenizerConstructor"
        },
        {
          "name": "TOKEN_THRESHOLDS",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "MAX_TOKEN_LIMIT",
          "initKind": "literal",
          "isExported": true
        }
      ]
    },
    "lib/types.ts": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "lib/utils/contextUtils.ts": {
      "imports": [
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "hasMeaningfulContext",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "normalizeContextForAPI",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "normalizeContextForCache",
          "initKind": "function",
          "isExported": true
        },
        {
          "name": "createContextSnapshot",
          "initKind": "function",
          "isExported": true
        }
      ]
    },
    "lib/validation/contextValidation.ts": {
      "imports": [
        {
          "from": "react",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "@/lib/types",
          "kind": "import",
          "imported": [
            "CompletionContextState"
          ]
        },
        {
          "from": "@/lib/tokenizer",
          "kind": "import",
          "imported": [
            "getContextTokenCount",
            "MAX_TOKEN_LIMIT"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "useFieldValidation",
          "params": [
            {
              "name": "value",
              "type": "T"
            },
            {
              "name": "field",
              "type": "keyof CompletionContextState"
            },
            {
              "name": "options",
              "type": "FieldValidationOptions"
            }
          ],
          "isAsync": false,
          "isExported": true
        },
        {
          "name": "useDebouncedValidation",
          "params": [
            {
              "name": "context",
              "type": "CompletionContextState"
            },
            {
              "name": "debounceMs",
              "type": "number"
            }
          ],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [
        {
          "name": "ContextValidator",
          "isExported": false,
          "methods": [
            {
              "name": "validateContext",
              "params": [
                {
                  "name": "context",
                  "type": "CompletionContextState"
                }
              ],
              "isAsync": false,
              "returnType": "ValidationResult",
              "isStatic": true
            },
            {
              "name": "validateField",
              "params": [
                {
                  "name": "field",
                  "type": "keyof CompletionContextState"
                },
                {
                  "name": "value",
                  "type": "unknown"
                },
                {
                  "name": "options",
                  "type": "FieldValidationOptions"
                }
              ],
              "isAsync": false,
              "returnType": "ValidationRule[]",
              "isStatic": true
            },
            {
              "name": "canSubmitContext",
              "params": [
                {
                  "name": "context",
                  "type": "CompletionContextState"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isStatic": true
            },
            {
              "name": "getValidationSummary",
              "params": [
                {
                  "name": "validation",
                  "type": "ValidationResult"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isStatic": true
            },
            {
              "name": "validateContextText",
              "params": [
                {
                  "name": "contextText",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "ValidationRule[]",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "validateTokenLimits",
              "params": [
                {
                  "name": "context",
                  "type": "CompletionContextState"
                }
              ],
              "isAsync": false,
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "validateContentSafety",
              "params": [
                {
                  "name": "context",
                  "type": "CompletionContextState"
                }
              ],
              "isAsync": false,
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "validateDuplicates",
              "params": [
                {
                  "name": "context",
                  "type": "CompletionContextState"
                }
              ],
              "isAsync": false,
              "isStatic": true,
              "isPrivate": true
            }
          ],
          "properties": [
            {
              "name": "FIELD_LIMITS",
              "isStatic": true,
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        }
      ],
      "constants": []
    },
    "next.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "nextConfig",
          "initKind": "object",
          "isExported": false
        }
      ]
    },
    "postcss.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "tailwind.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    }
  }
}